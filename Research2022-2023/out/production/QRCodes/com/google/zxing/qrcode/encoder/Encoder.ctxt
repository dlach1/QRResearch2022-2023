#BlueJ class context
comment0.target=Encoder
comment0.text=\r\n\ @author\ satorux@google.com\ (Satoru\ Takabayashi)\ -\ creator\r\n\ @author\ dswitkin@google.com\ (Daniel\ Switkin)\ -\ ported\ from\ C++\r\n
comment1.params=
comment1.target=Encoder()
comment10.params=code
comment10.target=int\ getAlphanumericCode(int)
comment10.text=\r\n\ @return\ the\ code\ point\ of\ the\ table\ used\ in\ alphanumeric\ mode\ or\r\n\ \ -1\ if\ there\ is\ no\ corresponding\ code\ in\ the\ table.\r\n
comment11.params=content
comment11.target=com.google.zxing.qrcode.decoder.Mode\ chooseMode(java.lang.String)
comment12.params=content\ encoding
comment12.target=com.google.zxing.qrcode.decoder.Mode\ chooseMode(java.lang.String,\ java.nio.charset.Charset)
comment12.text=\r\n\ Choose\ the\ best\ mode\ by\ examining\ the\ content.\ Note\ that\ 'encoding'\ is\ used\ as\ a\ hint;\r\n\ if\ it\ is\ Shift_JIS,\ and\ the\ input\ is\ only\ double-byte\ Kanji,\ then\ we\ return\ {@link\ Mode\#KANJI}.\r\n
comment13.params=content
comment13.target=boolean\ isOnlyDoubleByteKanji(java.lang.String)
comment14.params=bits\ ecLevel\ version\ matrix
comment14.target=int\ chooseMaskPattern(com.google.zxing.common.BitArray,\ com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,\ com.google.zxing.qrcode.decoder.Version,\ ByteMatrix)
comment15.params=numInputBits\ ecLevel
comment15.target=com.google.zxing.qrcode.decoder.Version\ chooseVersion(int,\ com.google.zxing.qrcode.decoder.ErrorCorrectionLevel)
comment16.params=numInputBits\ version\ ecLevel
comment16.target=boolean\ willFit(int,\ com.google.zxing.qrcode.decoder.Version,\ com.google.zxing.qrcode.decoder.ErrorCorrectionLevel)
comment16.text=\r\n\ @return\ true\ if\ the\ number\ of\ input\ bits\ will\ fit\ in\ a\ code\ with\ the\ specified\ version\ and\r\n\ error\ correction\ level.\r\n
comment17.params=numDataBytes\ bits
comment17.target=void\ terminateBits(int,\ com.google.zxing.common.BitArray)
comment17.text=\r\n\ Terminate\ bits\ as\ described\ in\ 8.4.8\ and\ 8.4.9\ of\ JISX0510\:2004\ (p.24).\r\n
comment18.params=numTotalBytes\ numDataBytes\ numRSBlocks\ blockID\ numDataBytesInBlock\ numECBytesInBlock
comment18.target=void\ getNumDataBytesAndNumECBytesForBlockID(int,\ int,\ int,\ int,\ int[],\ int[])
comment18.text=\r\n\ Get\ number\ of\ data\ bytes\ and\ number\ of\ error\ correction\ bytes\ for\ block\ id\ "blockID".\ Store\r\n\ the\ result\ in\ "numDataBytesInBlock",\ and\ "numECBytesInBlock".\ See\ table\ 12\ in\ 8.5.1\ of\r\n\ JISX0510\:2004\ (p.30)\r\n
comment19.params=input
comment19.target=boolean[]\ convertStringToBinary(java.lang.String)
comment2.params=s
comment2.target=Encoder(java.lang.String)
comment20.params=bits\ numTotalBytes\ numDataBytes\ numRSBlocks
comment20.target=com.google.zxing.common.BitArray\ interleaveWithECBytes(com.google.zxing.common.BitArray,\ int,\ int,\ int)
comment20.text=\r\n\ Interleave\ "bits"\ with\ corresponding\ error\ correction\ bytes.\ On\ success,\ store\ the\ result\ in\r\n\ "result".\ The\ interleave\ rule\ is\ complicated.\ See\ 8.6\ of\ JISX0510\:2004\ (p.37)\ for\ details.\r\n
comment21.params=dataBytes\ numEcBytesInBlock\ numRSBlocks
comment21.target=byte[]\ generateECBytes(byte[],\ int,\ int)
comment22.params=mode\ bits
comment22.target=void\ appendModeInfo(com.google.zxing.qrcode.decoder.Mode,\ com.google.zxing.common.BitArray)
comment22.text=\r\n\ Append\ mode\ info.\ On\ success,\ store\ the\ result\ in\ "bits".\r\n
comment23.params=numLetters\ version\ mode\ bits
comment23.target=void\ appendLengthInfo(int,\ com.google.zxing.qrcode.decoder.Version,\ com.google.zxing.qrcode.decoder.Mode,\ com.google.zxing.common.BitArray)
comment23.text=\r\n\ Append\ length\ info.\ On\ success,\ store\ the\ result\ in\ "bits".\r\n
comment24.params=content\ mode\ bits\ encoding
comment24.target=void\ appendBytes(java.lang.String,\ com.google.zxing.qrcode.decoder.Mode,\ com.google.zxing.common.BitArray,\ java.nio.charset.Charset)
comment24.text=\r\n\ Append\ "bytes"\ in\ "mode"\ mode\ (encoding)\ into\ "bits".\ On\ success,\ store\ the\ result\ in\ "bits".\r\n
comment25.params=content\ bits
comment25.target=void\ appendNumericBytes(java.lang.CharSequence,\ com.google.zxing.common.BitArray)
comment26.params=content\ bits
comment26.target=void\ appendAlphanumericBytes(java.lang.CharSequence,\ com.google.zxing.common.BitArray)
comment27.params=content\ bits\ encoding
comment27.target=void\ append8BitBytes(java.lang.String,\ com.google.zxing.common.BitArray,\ java.nio.charset.Charset)
comment28.params=content\ bits
comment28.target=void\ appendKanjiBytes(java.lang.String,\ com.google.zxing.common.BitArray)
comment29.params=eci\ bits
comment29.target=void\ appendECI(com.google.zxing.common.CharacterSetECI,\ com.google.zxing.common.BitArray)
comment3.params=matrix
comment3.target=int\ calculateMaskPenalty(ByteMatrix)
comment4.params=content\ ecLevel
comment4.target=QRCode\ encode(java.lang.String,\ com.google.zxing.qrcode.decoder.ErrorCorrectionLevel)
comment4.text=\r\n\ @param\ content\ text\ to\ encode\r\n\ @param\ ecLevel\ error\ correction\ level\ to\ use\r\n\ @return\ {@link\ QRCode}\ representing\ the\ encoded\ QR\ code\r\n\ @throws\ WriterException\ if\ encoding\ can't\ succeed,\ because\ of\ for\ example\ invalid\ content\r\n\ \ \ or\ configuration\r\n
comment5.params=content\ ecLevel\ hints\ s
comment5.target=QRCode\ encode(java.lang.String,\ com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,\ java.util.Map,\ java.lang.String)
comment6.params=length
comment6.target=boolean[]\ lengthToBinary(int)
comment7.params=content\ ecLevel\ hints
comment7.target=QRCode\ encode(java.lang.String,\ com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,\ java.util.Map)
comment8.params=ecLevel\ mode\ headerBits\ dataBits
comment8.target=com.google.zxing.qrcode.decoder.Version\ recommendVersion(com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,\ com.google.zxing.qrcode.decoder.Mode,\ com.google.zxing.common.BitArray,\ com.google.zxing.common.BitArray)
comment8.text=\r\n\ Decides\ the\ smallest\ version\ of\ QR\ code\ that\ will\ contain\ all\ of\ the\ provided\ data.\r\n\r\n\ @throws\ WriterException\ if\ the\ data\ cannot\ fit\ in\ any\ version\r\n
comment9.params=mode\ headerBits\ dataBits\ version
comment9.target=int\ calculateBitsNeeded(com.google.zxing.qrcode.decoder.Mode,\ com.google.zxing.common.BitArray,\ com.google.zxing.common.BitArray,\ com.google.zxing.qrcode.decoder.Version)
numComments=30
